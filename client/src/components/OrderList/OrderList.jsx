import React, { useState } from 'react';
import './OrderList.css';

const OrderList = ({ orders, onStatusChange, onViewOrder, onEditOrder }) => {
  const [filter, setFilter] = useState({
    status: 'all',
    searchText: '',
    dateFrom: '',
    dateTo: ''
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilter(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å
  const filteredOrders = orders.filter(order => {
    // –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    if (filter.status !== 'all' && order.status !== filter.status) {
      return false;
    }

    // –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–µ–∫—Å—Ç–æ–º (–Ω–æ–º–µ—Ä, —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω)
    if (filter.searchText) {
      const searchLower = filter.searchText.toLowerCase();
      const orderNumberMatch = order.orderNumber?.toLowerCase().includes(searchLower);
      const clientNameMatch = order.client?.name?.toLowerCase().includes(searchLower);
      const clientPhoneMatch = order.client?.phone?.toLowerCase().includes(searchLower);

      if (!orderNumberMatch && !clientNameMatch && !clientPhoneMatch) {
        return false;
      }
    }

    // –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é "–≤—ñ–¥"
    if (filter.dateFrom && new Date(order.receivedDate) < new Date(filter.dateFrom)) {
      return false;
    }

    // –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é "–¥–æ"
    if (filter.dateTo && new Date(order.receivedDate) > new Date(filter.dateTo)) {
      return false;
    }

    return true;
  });

  // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
  const getStatusLabel = (status) => {
    const statusMap = {
      new: '–ü—Ä–∏–π–Ω—è—Ç–æ',
      processing: '–í –æ–±—Ä–æ–±—Ü—ñ',
      ready: '–ì–æ—Ç–æ–≤–æ',
      delivered: '–í–∏–¥–∞–Ω–æ'
    };
    return statusMap[status] || status;
  };

  // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ –∫–ª–∞—Å –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
  const getStatusClass = (status) => {
    const classMap = {
      new: 'status-new',
      processing: 'status-processing',
      ready: 'status-ready',
      delivered: 'status-delivered'
    };
    return `status-badge ${classMap[status] || ''}`;
  };

  return (
    <div className="order-list-container">
      <h2>–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å</h2>

      {/* –§—ñ–ª—å—Ç—Ä–∏ */}
      <div className="filters-container">
        <div className="filter-group">
          <label htmlFor="status">–°—Ç–∞—Ç—É—Å:</label>
          <select
            id="status"
            name="status"
            value={filter.status}
            onChange={handleFilterChange}
          >
            <option value="all">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
            <option value="new">–ü—Ä–∏–π–Ω—è—Ç–æ</option>
            <option value="processing">–í –æ–±—Ä–æ–±—Ü—ñ</option>
            <option value="ready">–ì–æ—Ç–æ–≤–æ</option>
            <option value="delivered">–í–∏–¥–∞–Ω–æ</option>
          </select>
        </div>

        <div className="filter-group">
          <label htmlFor="searchText">–ü–æ—à—É–∫:</label>
          <input
            type="text"
            id="searchText"
            name="searchText"
            placeholder="‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∫–ª—ñ—î–Ω—Ç –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω"
            value={filter.searchText}
            onChange={handleFilterChange}
          />
        </div>

        <div className="date-filters">
          <div className="filter-group">
            <label htmlFor="dateFrom">–í—ñ–¥:</label>
            <input
              type="date"
              id="dateFrom"
              name="dateFrom"
              value={filter.dateFrom}
              onChange={handleFilterChange}
            />
          </div>

          <div className="filter-group">
            <label htmlFor="dateTo">–î–æ:</label>
            <input
              type="date"
              id="dateTo"
              name="dateTo"
              value={filter.dateTo}
              onChange={handleFilterChange}
            />
          </div>
        </div>
      </div>

      {/* –¢–∞–±–ª–∏—Ü—è –∑–∞–º–æ–≤–ª–µ–Ω—å */}
      <div className="table-container">
        <table className="orders-table">
          <thead>
            <tr>
              <th>‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</th>
              <th>–ö–ª—ñ—î–Ω—Ç</th>
              <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th>–î–∞—Ç–∞ –ø—Ä–∏–π–æ–º—É</th>
              <th>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ</th>
              <th>–°—É–º–∞</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î—ñ—ó</th>
            </tr>
          </thead>
          <tbody>
            {filteredOrders.length > 0 ? (
              filteredOrders.map(order => (
                <tr key={order._id || order.id}>
                  <td>{order.orderNumber}</td>
                  <td>{order.client.name}</td>
                  <td>{order.client.phone}</td>
                  <td>{new Date(order.receivedDate).toLocaleDateString()}</td>
                  <td>{new Date(order.promisedDate).toLocaleDateString()}</td>
                  <td>{order.totalAmount} –≥—Ä–Ω</td>
                  <td>
                    <span className={getStatusClass(order.status)}>
                      {getStatusLabel(order.status)}
                    </span>
                  </td>
                  <td className="actions-cell">
                    <button
                      className="btn btn-icon"
                      onClick={() => onViewOrder(order._id || order.id)}
                      title="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏"
                    >
                      üëÅÔ∏è
                    </button>
                    <button
                      className="btn btn-icon"
                      onClick={() => onEditOrder(order._id || order.id)}
                      title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
                    >
                      ‚úèÔ∏è
                    </button>
                    {order.status !== 'delivered' && (
                      <select
                        className="status-select"
                        value={order.status}
                        onChange={(e) => onStatusChange(order._id || order.id, e.target.value)}
                      >
                        <option value="" disabled>–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å</option>
                        <option value="new">–ü—Ä–∏–π–Ω—è—Ç–æ</option>
                        <option value="processing">–í –æ–±—Ä–æ–±—Ü—ñ</option>
                        <option value="ready">–ì–æ—Ç–æ–≤–æ</option>
                        <option value="delivered">–í–∏–¥–∞–Ω–æ</option>
                      </select>
                    )}
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="8" className="no-orders">
                  –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default OrderList;