import React, { useState } from 'react';
import './OrderList.css';
import OrderQRCode from '../QRCode/QRCode';

const OrderList = ({ orders, onStatusChange, onViewOrder, onEditOrder }) => {
  const [filter, setFilter] = useState({
    status: 'all',
    searchText: '',
    dateFrom: '',
    dateTo: ''
  });
  // QR code
  const [selectedOrderForQR, setSelectedOrderForQR] = useState(null);

  const printQRCode = () => {
    const printContent = document.getElementById('qr-code-for-print');
    const windowUrl = 'about:blank';
    const uniqueName = new Date().getTime();
    const windowName = 'Print' + uniqueName;
    const printWindow = window.open(windowUrl, windowName, 'left=200,top=200,width=500,height=500');

    if (!printWindow || !printContent) return;

    printWindow.document.write('<html><head><title>–î—Ä—É–∫ QR-–∫–æ–¥—É</title>');
    printWindow.document.write('<style>body { font-family: Arial; text-align: center; }</style>');
    printWindow.document.write('</head><body>');
    printWindow.document.write(printContent.innerHTML);
    printWindow.document.write('</body></html>');

    printWindow.document.close();
    printWindow.focus();
    setTimeout(() => {
      printWindow.print();
      printWindow.close();
    }, 250);
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É QR –∫–æ–¥—É
  const handleShowQRCode = (order) => {
    setSelectedOrderForQR(order);
  };

  // –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilter(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
  const adaptedOrders = Array.isArray(orders) ? orders : [];

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ API
  const getOrderProperty = (order, englishKey, ukrainianKey) => {
    // –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –Ω–∞–∑–≤—É, –ø–æ—Ç—ñ–º —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
    return order[englishKey] !== undefined ? order[englishKey] : order[ukrainianKey];
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
  const getOrderClient = (order) => {
    // –°–ø—Ä–æ–±—É—î–º–æ –¥—ñ—Å—Ç–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    const client = order.client || order.–∫–ª—ñ—î–Ω—Ç || {};
    return {
      name: client.name || client.forname || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
      phone: client.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'
    };
  };
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
  const getOrderStatus = (order) => {
    const status = order.status || order.—Å—Ç–∞—Ç—É—Å;
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å—Ç–∞—Ç—É—Å–∏ –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ
    const statusMap = {
      '–Ω–æ–≤–µ': 'new',
      '–≤ –æ–±—Ä–æ–±—Ü—ñ': 'processing',
      '–≥–æ—Ç–æ–≤–µ': 'ready',
      '–≤–∏–¥–∞–Ω–µ': 'delivered',
      '—Å–∫–∞—Å–æ–≤–∞–Ω–µ': 'cancelled'
    };
    return statusMap[status] || status || 'new';
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å
  const filteredOrders = adaptedOrders.filter(order => {
    // –î—ñ—Å—Ç–∞—î–º–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    const orderStatus = getOrderStatus(order);
    const client = getOrderClient(order);
    const orderNumber = getOrderProperty(order, 'orderNumber', '–Ω–æ–º–µ—Ä_–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è') || '';
    const receivedDate = getOrderProperty(order, 'receivedDate', '–¥–∞—Ç–∞_—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è') || new Date();
    
    // –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    if (filter.status !== 'all' && orderStatus !== filter.status) {
      return false;
    }

    // –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–µ–∫—Å—Ç–æ–º (–Ω–æ–º–µ—Ä, —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω)
    if (filter.searchText) {
      const searchLower = filter.searchText.toLowerCase();
      const orderNumberMatch = orderNumber.toLowerCase().includes(searchLower);
      const clientNameMatch = client.name.toLowerCase().includes(searchLower);
      const clientPhoneMatch = client.phone.toLowerCase().includes(searchLower);

      if (!orderNumberMatch && !clientNameMatch && !clientPhoneMatch) {
        return false;
      }
    }

    // –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é "–≤—ñ–¥"
    if (filter.dateFrom && new Date(receivedDate) < new Date(filter.dateFrom)) {
      return false;
    }

    // –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é "–¥–æ"
    if (filter.dateTo && new Date(receivedDate) > new Date(filter.dateTo)) {
      return false;
    }

    return true;
  });

  // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
  const getStatusLabel = (status) => {
    const statusMap = {
      new: '–ü—Ä–∏–π–Ω—è—Ç–æ',
      n–æ–≤–µ: '–ü—Ä–∏–π–Ω—è—Ç–æ',
      processing: '–í –æ–±—Ä–æ–±—Ü—ñ',
      '–≤ –æ–±—Ä–æ–±—Ü—ñ': '–í –æ–±—Ä–æ–±—Ü—ñ',
      ready: '–ì–æ—Ç–æ–≤–æ',
      –≥–æ—Ç–æ–≤–µ: '–ì–æ—Ç–æ–≤–æ',
      delivered: '–í–∏–¥–∞–Ω–æ',
      –≤–∏–¥–∞–Ω–µ: '–í–∏–¥–∞–Ω–æ',
      cancelled: '–°–∫–∞—Å–æ–≤–∞–Ω–æ',
      —Å–∫–∞—Å–æ–≤–∞–Ω–µ: '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
    };
    return statusMap[status] || status;
  };

  // –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ –∫–ª–∞—Å –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
  const getStatusClass = (status) => {
    const classMap = {
      new: 'status-new',
      n–æ–≤–µ: 'status-new',
      processing: 'status-processing',
      '–≤ –æ–±—Ä–æ–±—Ü—ñ': 'status-processing',
      ready: 'status-ready',
      –≥–æ—Ç–æ–≤–µ: 'status-ready',
      delivered: 'status-delivered',
      –≤–∏–¥–∞–Ω–µ: 'status-delivered',
      cancelled: 'status-cancelled',
      —Å–∫–∞—Å–æ–≤–∞–Ω–µ: 'status-cancelled'
    };
    return `status-badge ${classMap[status] || ''}`;
  };

  return (
    <div className="order-list-container">
      <h2>–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å</h2>

      {/* –§—ñ–ª—å—Ç—Ä–∏ */}
      <div className="filters-container">
        <div className="filter-group">
          <label htmlFor="status">–°—Ç–∞—Ç—É—Å:</label>
          <select
            id="status"
            name="status"
            value={filter.status}
            onChange={handleFilterChange}
          >
            <option value="all">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
            <option value="new">–ü—Ä–∏–π–Ω—è—Ç–æ</option>
            <option value="processing">–í –æ–±—Ä–æ–±—Ü—ñ</option>
            <option value="ready">–ì–æ—Ç–æ–≤–æ</option>
            <option value="delivered">–í–∏–¥–∞–Ω–æ</option>
          </select>
        </div>

        <div className="filter-group">
          <label htmlFor="searchText">–ü–æ—à—É–∫:</label>
          <input
            type="text"
            id="searchText"
            name="searchText"
            placeholder="‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∫–ª—ñ—î–Ω—Ç –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω"
            value={filter.searchText}
            onChange={handleFilterChange}
          />
        </div>

        <div className="date-filters">
          <div className="filter-group">
            <label htmlFor="dateFrom">–í—ñ–¥:</label>
            <input
              type="date"
              id="dateFrom"
              name="dateFrom"
              value={filter.dateFrom}
              onChange={handleFilterChange}
            />
          </div>

          <div className="filter-group">
            <label htmlFor="dateTo">–î–æ:</label>
            <input
              type="date"
              id="dateTo"
              name="dateTo"
              value={filter.dateTo}
              onChange={handleFilterChange}
            />
          </div>
        </div>
      </div>

      {/* –¢–∞–±–ª–∏—Ü—è –∑–∞–º–æ–≤–ª–µ–Ω—å */}
      <div className="table-container">
        <table className="orders-table">
          <thead>
            <tr>
              <th>‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</th>
              <th>–ö–ª—ñ—î–Ω—Ç</th>
              <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th>–î–∞—Ç–∞ –ø—Ä–∏–π–æ–º—É</th>
              <th>–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ</th>
              <th>–°—É–º–∞</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î—ñ—ó</th>
            </tr>
          </thead>
          <tbody>
            {filteredOrders.length > 0 ? (
              filteredOrders.map(order => {
                // –î—ñ—Å—Ç–∞—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                const id = order._id || order.id;
                const orderNumber = getOrderProperty(order, 'orderNumber', '–Ω–æ–º–µ—Ä_–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è') || '';
                const client = getOrderClient(order);
                const receivedDate = getOrderProperty(order, 'receivedDate', '–¥–∞—Ç–∞_—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è') || new Date();
                const promisedDate = getOrderProperty(order, 'promisedDate', '–¥–∞—Ç–∞_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è') || receivedDate;
                const totalAmount = getOrderProperty(order, 'totalAmount', '—Å—É–º–∞_–¥–æ_—Å–ø–ª–∞—Ç–∏') || 0;
                const status = getOrderStatus(order);
                
                return (
                  <tr key={id}>
                    <td>{orderNumber}</td>
                    <td>{client.name}</td>
                    <td>{client.phone}</td>
                    <td>{new Date(receivedDate).toLocaleDateString()}</td>
                    <td>{new Date(promisedDate).toLocaleDateString()}</td>
                    <td>{totalAmount} –≥—Ä–Ω</td>
                    <td>
                      <span className={getStatusClass(status)}>
                        {getStatusLabel(status)}
                      </span>
                    </td>
                    <td className="actions-cell">
                      <button
                        className="btn btn-icon"
                        onClick={() => onViewOrder(id)}
                        title="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏"
                      >
                        üëÅÔ∏è
                      </button>
                      <button
                        className="btn btn-icon"
                        onClick={() => onEditOrder(id)}
                        title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        className="btn btn-icon"
                        onClick={() => window.open(`/print/${id}`, '_blank')}
                        title="–î—Ä—É–∫—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
                      >
                        üñ®Ô∏è
                      </button>
                      <button
                        className="btn btn-icon"
                        onClick={() => window.open(`/invoice/${id}`, '_blank')}
                        title="–î—Ä—É–∫—É–≤–∞—Ç–∏ —ñ–Ω–≤–æ–π—Å"
                      >
                        üìÉ
                      </button>
                      {status !== 'delivered' && status !== '–≤–∏–¥–∞–Ω–µ' && (
                        <select
                          className="status-select"
                          value={status}
                          onChange={(e) => onStatusChange(id, e.target.value)}
                        >
                          <option value="" disabled>–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å</option>
                          <option value="new">–ü—Ä–∏–π–Ω—è—Ç–æ</option>
                          <option value="processing">–í –æ–±—Ä–æ–±—Ü—ñ</option>
                          <option value="ready">–ì–æ—Ç–æ–≤–æ</option>
                          <option value="delivered">–í–∏–¥–∞–Ω–æ</option>
                        </select>
                      )}
                      <button
                        className="btn btn-icon"
                        onClick={() => handleShowQRCode(order)}
                        title="QR-–∫–æ–¥"
                      >
                        üîç
                      </button>
                    </td>
                  </tr>
                );
              })
            ) : (
              <tr>
                <td colSpan="8" className="no-orders">
                  –ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—è–º —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
                </td>
              </tr>
            )}
          </tbody>
        </table>
        {selectedOrderForQR && (
          <div className="qr-code-modal">
            <div className="qr-code-modal-content">
              <h3>QR-–∫–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {getOrderProperty(selectedOrderForQR, 'orderNumber', '–Ω–æ–º–µ—Ä_–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')}</h3>
              <div id="qr-code-for-print">
                <OrderQRCode orderNumber={getOrderProperty(selectedOrderForQR, 'orderNumber', '–Ω–æ–º–µ—Ä_–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')} size={200} />
              </div>
              <div className="qr-code-modal-buttons">
                <button className="btn btn-primary" onClick={printQRCode}>
                  –î—Ä—É–∫—É–≤–∞—Ç–∏
                </button>
                <button className="btn btn-secondary" onClick={() => setSelectedOrderForQR(null)}>
                  –ó–∞–∫—Ä–∏—Ç–∏
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default OrderList;